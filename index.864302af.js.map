{"mappings":"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","sources":["src/js/api-service/trendingAndGenres.js","src/js/card/card-murkup-main.js","src/js/all-genres/find-genres.js","src/js/pagination/RequestHendler.js","src/js/api-service/searcheAndRender.js","src/js/pagination/getDataAndPutToRender.js","src/js/pagination/fetchData.js","src/js/pagination/paginationEventHandler.js"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '19011014b9b53c4fd496d37c25f2b619';\nimport spinnerControls from '../spinner/spinner';\n// import libraryCardMarkup from '../library-card/library-card';\nimport markupCard from '../card/card-murkup-main';\n// ====== Добавил Толик Шулика =========\nimport paginationManager from '../pagination/paginationManager';\nimport PathHendler from '../pagination/RequestHendler';\n// ====== Добавил Толик Шулика =========\n\nexport class GetTrendingMovies {\n  constructor() {\n    this.page = 1;\n    this.searchQuery = '';\n  }\n\n  async searchTrendingFilms() {\n    const url = `${BASE_URL}trending/all/week?api_key=${API_KEY}&page=${this.page}`;\n    try {\n      const response = await fetch(url);\n      const trendings = await response.json();\n      return trendings;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async searchGenres() {\n    const url = `${BASE_URL}genre/movie/list?api_key=${API_KEY}`;\n    try {\n      const response = await fetch(url);\n      const genres = await response.json();\n      return genres;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async fetchMovieSearch() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}search/movie?api_key=${API_KEY}&query=${this.searchQuery}&page=${this.page}`\n      );\n      const searchedMovies = await response.json();\n      return searchedMovies;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // ====== Добавил Толик Шулика =========\n  GetMovieSearcPath() {\n    return `${BASE_URL}search/movie?api_key=${API_KEY}&query=${this.searchQuery}`;\n  }\n  GetTrendingSearcPath() {\n    return `${BASE_URL}trending/all/week?api_key=${API_KEY}`;\n  }\n  // ====== Добавил Толик Шулика =========\n\n  pageIncrement() {\n    this.page += 1;\n  }\n\n  pageDecrement() {\n    this.page -= 1;\n  }\n\n  resetPage() {\n    this.page = 1;\n  }\n\n  set currentPage(newPage) {\n    this.page = newPage;\n  }\n\n  get currentPage() {\n    return this.page;\n  }\n\n  get query() {\n    return this.searchQuery;\n  }\n\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n}\n\nconst GetMovies = new GetTrendingMovies();\n\nconst container = document.querySelector('.films-list');\nwindow.addEventListener('load', () => {\n  spinnerControls.showSpinner();\n  setTimeout(markupRenderer, 500);\n});\n\nasync function markupRenderer() {\n  const genres = await GetMovies.searchGenres();\n  const trendings = await GetMovies.searchTrendingFilms();\n  const markup = markupCard(trendings.results, genres);\n  container.innerHTML = markup;\n  // ====== Добавил Толик Шулика =========\n  paginationManager(trendings.page, trendings.total_pages);\n  PathHendler.path = GetMovies.GetTrendingSearcPath();\n  // ====== Добавил Толик Шулика =========\n\n  spinnerControls.hideSpinner();\n}\n\nexport default GetTrendingMovies;\n","import dateOptimizer from '../api-service/date-optimizer';\nimport titleOptimizer from '../api-service/title-optimizer';\nimport findGenres from '../all-genres/find-genres';\nimport picturePathPlace from '../api-service/placeholder';\nexport default function markupCard(data, genres) {\n  console.log(data);\n  const card = data\n    .map(\n      ({\n        id,\n        title,\n        name,\n        genre_ids,\n        release_date,\n        first_air_date,\n        poster_path,\n      }) => {\n        return `<li class=\"films-list__item\" data-id=\"${id}\">\n                    <img class=\"films-list__img\" src=\"${picturePathPlace(\n                      poster_path\n                    )}\" alt=\"${titleOptimizer(title, name)}\" />\n                    <h2 class=\"films-list__title\">${titleOptimizer(\n                      title,\n                      name\n                    )}</h2>\n                    <span class=\"films-list__info films-list__ganre\">${findGenres(\n                      genres,\n                      genre_ids\n                    )}</span> <span class=\"films-list__info\">&#10072;</span> <span class=\"films-list__info release-date\">${dateOptimizer(\n          release_date,\n          first_air_date\n        )}</span>\n            </li>`;\n      }\n    )\n    .join('');\n  return card;\n}\n","export default function findGenres(genres, genreIds) {\n  const genresArray = [];\n\n  if (!genreIds) {\n    return 'Other';\n  }\n\n  for (let id of genreIds) {\n    let item = genres.genres.find(genre => genre.id === id);\n    if (item == undefined) {\n      continue;\n    } else {\n      genresArray.push(item.name);\n    }\n  }\n\n  if (genresArray.length === 0) {\n    genresArray.push('Other');\n  }\n\n  if (genresArray.length > 3) {\n    return [genresArray[0], genresArray[1], 'Other'].join(', ');\n  }\n\n  return genresArray.join(', ');\n}\n","class RequestHendler {\n  constructor() {\n    this.requst = '';\n  }\n  get path() {\n    return this.requst;\n  }\n\n  set path(newPath) {\n    this.requst = newPath;\n  }\n}\n\nconst pathToTrandingMovies =\n  'https://api.themoviedb.org/3/trending/movie/week?api_key=19011014b9b53c4fd496d37c25f2b619';\n\nconst PathHendler = new RequestHendler();\nPathHendler.path = pathToTrandingMovies;\nexport default PathHendler;\n","import GetTrendingMovies from './trendingAndGenres';\nimport markupCard from '../card/card-murkup-main';\nimport spinnerControls from '../spinner/spinner';\n// ====== Добавил Толик Шулика =========\nimport paginationManager from '../pagination/paginationManager';\nimport PathHendler from '../pagination/RequestHendler';\n// ====== Добавил Толик Шулика =========\n\nconst refs = {\n  searchForm: document.querySelector('.search-form'),\n  articlesContainer: document.querySelector('.films-list'),\n  txt: document.querySelector('.errorText'),\n};\n\nconst moviesApiService = new GetTrendingMovies();\nconst text = refs.txt.textContent;\n\n// console.log('errorText', text);\nrefs.txt.textContent = ' ';\n// console.log('moviesApiService', moviesApiService);\n\nrefs.searchForm.addEventListener('submit', onSearch);\n\nasync function onSearch(e) {\n  e.preventDefault();\n  // ====== Добавил Толик Шулика =========\n  const divPaginationRef = document.querySelector('.pagination');\n  divPaginationRef.classList.add('hide-pagination');\n  // ====== Добавил Толик Шулика =========\n\n  moviesApiService.query = e.currentTarget.elements.query.value;\n\n  const genres = await moviesApiService.searchGenres();\n  const searchedMovies = await moviesApiService.fetchMovieSearch();\n  clearArticlesContainer();\n  if (moviesApiService.query === '' || searchedMovies.results.length === 0) {\n    refs.txt.style.color = '#ff001b';\n    refs.txt.textContent =\n      'Search result not successful. Enter the correct movie name and try again!';\n    refs.searchForm.reset();\n    return;\n  }\n\n  refs.txt.textContent = ' ';\n\n  spinnerControls.showSpinner();\n  moviesApiService.resetPage();\n  appendHitsMarkup(searchedMovies.results, genres);\n  refs.searchForm.reset();\n  refs.txt.style.color = 'green';\n  refs.txt.textContent = `Search result for: ${capitalizeQuery(\n    moviesApiService.query\n  )}`;\n  // ====== Добавил Толик Шулика =========\n  paginationManager(searchedMovies.page, searchedMovies.total_pages);\n  PathHendler.path = moviesApiService.GetMovieSearcPath();\n  // ====== Добавил Толик Шулика =========\n}\n\nfunction appendHitsMarkup(results, genres) {\n  refs.articlesContainer.insertAdjacentHTML(\n    'beforeend',\n    markupCard(results, genres)\n  );\n  // message.hidenError();\n  spinnerControls.hideSpinner();\n}\n\nfunction clearArticlesContainer() {\n  refs.articlesContainer.innerHTML = '';\n}\n\nfunction capitalizeQuery(text) {\n  return text[0].toUpperCase() + text.slice(1);\n}\n\n// function messageError() {\n//   refs.txt.classList.remove('visually-hidden');\n// }\n\n// function hidenError() {\n//   refs.txt.classList.add('visually-hidden');\n// }\n// =============Часть от Олега===================================\n// async function markupRenderer() {\n//     const genres = await moviesApiService.searchGenres();\n//     const trendings = await moviesApiService.fetchMovieSearche();\n//     console.log(trendings);\n//     console.log(genres);\n//     const markup = markupCard(trendings.results, genres);\n//     refs.articlesContainer.insertAdjacentHTML('beforeend', markup);\n//   }\n\n// ================================================\n\n// function createCard(results) {\n//   return results\n//     .map(\n//       ({\n//         poster_path,\n//         original_title,\n//         id,\n//         popularity,\n//         release_date,\n//         vote_count,\n//         genre_ids,\n//       }) => {\n//         return `\n//         <li class=\"films-list__item\" data-id=\"${id}\">\n//         <div class=\"wrapper\">\n//             <img src=\"http://image.tmdb.org/t/p/w500${poster_path}\" alt=\"movie\"/>\n//         </div>\n//         <div class=\"text-wrapper\">\n//             <h2 class=\"films-list__title\">${original_title}</h2>\n//             <p class=\"films-list__text\"><span class=\"films-list__ganre\">'In progress'</span> &#10072; <span class=\"release-date\">${release_date.slice(\n//               0,\n//               4\n//             )}</span>\n//             </p>\n//         </div>\n//     </li>\n//   `;\n//       }\n//     )\n//     .join('');\n// }\n","import paginationManager from './paginationManager';\nimport markupCard from '../card/card-murkup-main';\nimport fetchData from './fetchData';\n\nconst container = document.querySelector('.films-list');\nconst pathToGanres =\n  'https://api.themoviedb.org/3/genre/movie/list?api_key=19011014b9b53c4fd496d37c25f2b619';\n\nasync function getDataAndPutToRender(basePath, page) {\n  const movies = await fetchData(`${basePath}&page=${page}`);\n  const genres = await fetchData(pathToGanres);\n  const markupListOfMovies = await markupCard(movies.results, genres);\n  container.innerHTML = markupListOfMovies;\n  paginationManager(movies.page, movies.total_pages);\n  window.scrollTo({\n    top: 270,\n    behavior: 'smooth',\n  });\n}\n\nexport default getDataAndPutToRender;\n","import Notiflix from 'notiflix';\nimport axios from 'axios';\n\nasync function fetchData(path) {\n  try {\n    const response = await axios.get(path);\n    return response.data;\n  } catch (error) {\n    Notiflix.Notify.error(error);\n    return;\n  }\n}\n\nexport default fetchData;\n","import getDataAndPutToRender from './getDataAndPutToRender';\nimport PathHendler from './RequestHendler';\n\nconst paginationRef = document.querySelector('.pagination');\n\npaginationRef.addEventListener('click', e => {\n  if (e.target.innerText === '' || e.target.type !== 'button') {\n    return;\n  }\n  const currentButton = document.querySelector('.current-btn');\n  let page = currentButton.innerText;\n  if (e.target.innerText === '+1') {\n    page = parseInt(page) + 1;\n  } else if (e.target.innerText === '-1') {\n    page = parseInt(page) - 1;\n  } else {\n    page = e.target.innerText;\n  }\n  getDataAndPutToRender(PathHendler.path, page);\n});\n"],"names":["$hsVKb","parcelRequire","$7JhjK","$4c58d22a933a5163$export$2e2bcd8739ae039","genres","genreIds","genresArray","id","item","find","genre","undefined","push","name","length","join","$3ecc2339d578db49$export$2e2bcd8739ae039","data","console","log","map","title","genre_ids","release_date","first_air_date","poster_path","$CjjGD","default","$8mK9U","$be52aba76490895e$var$PathHendler","path","this","requst","newPath","constructor","$be52aba76490895e$export$2e2bcd8739ae039","$84c1efcef7a72cea$export$be063a400d042648","async","url","page","response","fetch","json","error","searchQuery","GetMovieSearcPath","GetTrendingSearcPath","pageIncrement","pageDecrement","resetPage","currentPage","newPage","query","newQuery","$84c1efcef7a72cea$var$GetMovies","$84c1efcef7a72cea$var$container","document","querySelector","$84c1efcef7a72cea$var$markupRenderer","searchGenres","trendings","searchTrendingFilms","markup","results","innerHTML","$1lykM","total_pages","hideSpinner","window","addEventListener","showSpinner","setTimeout","$84c1efcef7a72cea$export$2e2bcd8739ae039","$cd61ce3655e4d915$var$refs","searchForm","articlesContainer","txt","$cd61ce3655e4d915$var$moviesApiService","textContent","e","preventDefault","classList","add","currentTarget","elements","value","searchedMovies","fetchMovieSearch","$cd61ce3655e4d915$var$clearArticlesContainer","style","color","reset","insertAdjacentHTML","$cd61ce3655e4d915$var$appendHitsMarkup","text1","toUpperCase","slice","$eWCmQ","$38ea56ea156408a6$export$2e2bcd8739ae039","$2shzp","get","$parcel$interopDefault","Notify","$496b3e73b3bf2998$var$container","$496b3e73b3bf2998$export$2e2bcd8739ae039","basePath","movies","markupListOfMovies","scrollTo","top","behavior","target","innerText","type","parseInt"],"version":3,"file":"index.864302af.js.map"}