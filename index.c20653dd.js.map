{"mappings":"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","sources":["src/js/api-service/trendingAndGenres.js","src/js/api-service/searcheAndRender.js"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '19011014b9b53c4fd496d37c25f2b619';\nimport spinnerControls from '../spinner/spinner';\n// import libraryCardMarkup from '../library-card/library-card';\nimport markupCard from '../card/card-murkup-main';\n// ====== Добавил Толик Шулика =========\nimport paginationManager from '../pagination/paginationManager';\nimport PathHendler from '../pagination/RequestHendler';\n// ====== Добавил Толик Шулика =========\n\nexport class GetTrendingMovies {\n  constructor() {\n    this.page = 1;\n    this.searchQuery = '';\n  }\n\n  async searchTrendingFilms() {\n    const url = `${BASE_URL}trending/all/week?api_key=${API_KEY}&page=${this.page}`;\n    try {\n      const response = await fetch(url);\n      const trendings = await response.json();\n      return trendings;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async searchGenres() {\n    const url = `${BASE_URL}genre/movie/list?api_key=${API_KEY}`;\n    try {\n      const response = await fetch(url);\n      const genres = await response.json();\n      return genres;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async fetchMovieSearch() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}search/movie?api_key=${API_KEY}&query=${this.searchQuery}&page=${this.page}`\n      );\n      const searchedMovies = await response.json();\n      return searchedMovies;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // ====== Добавил Толик Шулика =========\n  GetMovieSearcPath() {\n    return `${BASE_URL}search/movie?api_key=${API_KEY}&query=${this.searchQuery}`;\n  }\n  GetTrendingSearcPath() {\n    return `${BASE_URL}trending/all/week?api_key=${API_KEY}`;\n  }\n  // ====== Добавил Толик Шулика =========\n\n  pageIncrement() {\n    this.page += 1;\n  }\n\n  pageDecrement() {\n    this.page -= 1;\n  }\n\n  resetPage() {\n    this.page = 1;\n  }\n\n  set currentPage(newPage) {\n    this.page = newPage;\n  }\n\n  get currentPage() {\n    return this.page;\n  }\n\n  get query() {\n    return this.searchQuery;\n  }\n\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n}\n\nconst GetMovies = new GetTrendingMovies();\n\nconst container = document.querySelector('.films-list');\nwindow.addEventListener('load', () => {\n  spinnerControls.showSpinner();\n  setTimeout(markupRenderer, 500);\n});\n\nasync function markupRenderer() {\n  const genres = await GetMovies.searchGenres();\n  const trendings = await GetMovies.searchTrendingFilms();\n  const markup = markupCard(trendings.results, genres);\n  container.innerHTML = markup;\n  // ====== Добавил Толик Шулика =========\n  paginationManager(trendings.page, trendings.total_pages);\n  PathHendler.path = GetMovies.GetTrendingSearcPath();\n  // ====== Добавил Толик Шулика =========\n\n  spinnerControls.hideSpinner();\n}\n\nexport default GetTrendingMovies;\n","// import MoviesApiService from './searchMovie';\nimport GetTrendingMovies from './trendingAndGenres';\nimport markupCard from '../card/card-murkup-main';\nimport spinnerControls from '../spinner/spinner';\n// ====== Добавил Толик Шулика =========\nimport paginationManager from '../pagination/paginationManager';\nimport PathHendler from '../pagination/RequestHendler';\n// ====== Добавил Толик Шулика =========\n\nconst refs = {\n  searchForm: document.querySelector('.search-form'),\n  articlesContainer: document.querySelector('.films-list'),\n  txt: document.querySelector('.errorText'),\n};\n\nconst moviesApiService = new GetTrendingMovies();\nconst text = refs.txt.textContent;\n\n// console.log('errorText', text);\nrefs.txt.textContent = ' ';\n// console.log('moviesApiService', moviesApiService);\n\nrefs.searchForm.addEventListener('submit', onSearch);\n\nasync function onSearch(e) {\n  e.preventDefault();\n  // ====== Добавил Толик Шулика =========\n  const divPaginationRef = document.querySelector('.pagination');\n  divPaginationRef.classList.add('hide-pagination');\n  // ====== Добавил Толик Шулика =========\n\n  moviesApiService.query = e.currentTarget.elements.query.value;\n\n  const genres = await moviesApiService.searchGenres();\n  const searchedMovies = await moviesApiService.fetchMovieSearch();\n  clearArticlesContainer();\n  if (moviesApiService.query === '' || searchedMovies.results.length === 0) {\n    refs.txt.style.color = '#ff001b';\n    refs.txt.textContent =\n      'Search result not successful. Enter the correct movie name and try again!';\n    refs.searchForm.reset();\n    return;\n  }\n\n  refs.txt.textContent = ' ';\n\n  spinnerControls.showSpinner();\n  moviesApiService.resetPage();\n  appendHitsMarkup(searchedMovies.results, genres);\n  refs.searchForm.reset();\n  refs.txt.style.color = 'green';\n  refs.txt.textContent = `Search result for: ${capitalizeQuery(\n    moviesApiService.query\n  )}`;\n  // ====== Добавил Толик Шулика =========\n  paginationManager(searchedMovies.page, searchedMovies.total_pages);\n  PathHendler.path = moviesApiService.GetMovieSearcPath();\n  // ====== Добавил Толик Шулика =========\n}\n\nfunction appendHitsMarkup(results, genres) {\n  refs.articlesContainer.insertAdjacentHTML(\n    'beforeend',\n    markupCard(results, genres)\n  );\n  // message.hidenError();\n  spinnerControls.hideSpinner();\n}\n\nfunction clearArticlesContainer() {\n  refs.articlesContainer.innerHTML = '';\n}\n\nfunction capitalizeQuery(text) {\n  return text[0].toUpperCase() + text.slice(1);\n}\n\n// function messageError() {\n//   refs.txt.classList.remove('visually-hidden');\n// }\n\n// function hidenError() {\n//   refs.txt.classList.add('visually-hidden');\n// }\n// =============Часть от Олега===================================\n// async function markupRenderer() {\n//     const genres = await moviesApiService.searchGenres();\n//     const trendings = await moviesApiService.fetchMovieSearche();\n//     console.log(trendings);\n//     console.log(genres);\n//     const markup = markupCard(trendings.results, genres);\n//     refs.articlesContainer.insertAdjacentHTML('beforeend', markup);\n//   }\n\n// ================================================\n\n// function createCard(results) {\n//   return results\n//     .map(\n//       ({\n//         poster_path,\n//         original_title,\n//         id,\n//         popularity,\n//         release_date,\n//         vote_count,\n//         genre_ids,\n//       }) => {\n//         return `\n//         <li class=\"films-list__item\" data-id=\"${id}\">\n//         <div class=\"wrapper\">\n//             <img src=\"http://image.tmdb.org/t/p/w500${poster_path}\" alt=\"movie\"/>\n//         </div>\n//         <div class=\"text-wrapper\">\n//             <h2 class=\"films-list__title\">${original_title}</h2>\n//             <p class=\"films-list__text\"><span class=\"films-list__ganre\">'In progress'</span> &#10072; <span class=\"release-date\">${release_date.slice(\n//               0,\n//               4\n//             )}</span>\n//             </p>\n//         </div>\n//     </li>\n//   `;\n//       }\n//     )\n//     .join('');\n// }\n"],"names":["$bpxeT","parcelRequire","$8cacc7328f930a8a$var$BASE_URL","$8cacc7328f930a8a$var$API_KEY","$8cacc7328f930a8a$export$be063a400d042648","GetTrendingMovies","this","page","searchQuery","key","$parcel$interopDefault","$2TvXO","mark","_callee","url","response","trendings","concat","_this","fetch","_ctx","sent","json","console","log","t0","genres","searchedMovies","newPage","newQuery","$8cacc7328f930a8a$var$GetMovies","$8cacc7328f930a8a$var$container","document","querySelector","$8cacc7328f930a8a$var$markupRenderer","$8cacc7328f930a8a$var$_markupRenderer","apply","arguments","markup","searchGenres","searchTrendingFilms","$4OjDq","default","results","innerHTML","$3HVvE","total_pages","$8hLto","path","GetTrendingSearcPath","$cUafD","hideSpinner","window","addEventListener","showSpinner","setTimeout","$8cacc7328f930a8a$export$2e2bcd8739ae039","$921bbd075a5fa291$var$refs","searchForm","articlesContainer","txt","$921bbd075a5fa291$var$moviesApiService","textContent","$921bbd075a5fa291$var$_onSearch","e","preventDefault","classList","add","query","currentTarget","elements","value","fetchMovieSearch","$921bbd075a5fa291$var$clearArticlesContainer","length","style","color","reset","resetPage","$921bbd075a5fa291$var$appendHitsMarkup","$921bbd075a5fa291$var$capitalizeQuery","GetMovieSearcPath","insertAdjacentHTML","text1","toUpperCase","slice"],"version":3,"file":"index.c20653dd.js.map"}